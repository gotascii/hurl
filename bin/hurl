#!/usr/bin/ruby

require 'rubygems'
require 'appscript'
include Appscript

class Project
  attr_accessor :project_dir, :appscript

  def initialize(dir)
    @project_dir = dir
  end
end

class Session
  attr_reader :session
  
  def initialize(sesh)
    @session = sesh
  end

  def method_missing(command, *args)
    cmd = command.to_s + args.inject('') do |opts, arg| opts += ' ' + arg.to_s end
    exec(cmd)
  end
end

class ITermSession < Session
  def exec(command)
    @session.write(:text => command)
  end
end

class ITerm < Project
  def initialize(dir)
    @appscript = app('iTerm').current_terminal
    super(dir)
  end
  
  def create_tab
    @appscript.launch_(:session => "Default Session")
    yield ITermSession.new(@appscript.sessions.last) if block_given?
  end

  def this_tab
    yield ITermSession.new(@appscript.current_session) if block_given?
  end
end

class TerminalSession < Session
  def exec(command)
    @session.do_script(command, :in => @session)
  end
end

class Terminal < Project
  def initialize(dir)
    @appscript = app('Terminal').windows[0]
    super(dir)
  end

  def create_tab(&block)
    @appscript.activate
    app("System Events").keystroke("t", :using => :command_down)
    yield TerminalSession.new(@appscript.tabs.last) if block_given?
  end

  def this_tab
    @appscript.activate
    yield TerminalSession.new(@appscript.tabs.first) if block_given?
  end
end

module Hurler
  attr_accessor :project_dir

  def using(klass)
    @wrapper = klass.new(@project_dir)
  end

  def create_tab(&block)
    @wrapper.create_tab(&block)
  end

  def this_tab(&block)
    @wrapper.this_tab(&block)
  end
end

if __FILE__ == $0
  include Hurler
  project_dir = ARGV.shift
  using ITerm
  ["", "/lib"].each do |path|
    hurls = "#{project_dir}#{path}/hurls.rb"
    puts hurls
    require hurls if File.exist? hurls
  end
end